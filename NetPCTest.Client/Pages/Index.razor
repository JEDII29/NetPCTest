@page "/"
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Net.Http
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<PageTitle>Index</PageTitle>

<h1>Podstawowe informacje kontaktowe użytkowników</h1>

<select @bind="chosenValue">
    <option value="">Wybierz użytkownika</option>
    @foreach (var user in Users)
    {
        <option value="@user.Id">@user.Name</option>
    }
</select>
<button @onclick="FetchContacts">Pobierz kontakty</button>

@if (Cards != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Firstame</th>
                <th>Lastname</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var card in Cards)
            {
                <tr>
                    <td>@card.Firstname</td>
                    <td>@card.Lastname</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserModel> Users { get; set; } = new List<UserModel>();
    private List<CardModel> Cards { get; set; } = new List<CardModel>();
    private string chosenValue;
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7062/api/User/GetUsers");
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            Users = await JsonSerializer.DeserializeAsync
                <List<UserModel>>(responseStream);
        }
        else
        {
        }
    }

    private async Task FetchContacts()
    {
        if (!string.IsNullOrEmpty(chosenValue))
        {
            var httpClient = new HttpClient();
            var request = new HttpRequestMessage(HttpMethod.Get,$"https://localhost:7062/api/Contact/GetBasicUserContacts?userId={chosenValue}");
            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                Cards = new List<CardModel>();
                Cards = await JsonSerializer.DeserializeAsync
                    <List<CardModel>>(responseStream);
            }
            else
            {
            }

        }
    }

    public class UserModel
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }
        [JsonPropertyName("username")]
        public string Name { get; set; }
    }

    public class CardModel
    {
        [JsonPropertyName("firstname")]
        public string Firstname { get; set; }
        [JsonPropertyName("lastname")]
        public string Lastname { get; set; }
    }
}